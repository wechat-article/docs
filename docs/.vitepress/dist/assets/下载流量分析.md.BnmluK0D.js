import{_ as e,c as l,o as t,ae as i}from"./chunks/framework.BHrE6nLq.js";const u=JSON.parse('{"title":"流量分析","description":"","frontmatter":{},"headers":[],"relativePath":"下载流量分析.md","filePath":"下载流量分析.md"}'),r={name:"下载流量分析.md"};function o(n,a,d,s,_,c){return t(),l("div",null,a[0]||(a[0]=[i('<h1 id="流量分析" tabindex="-1">流量分析 <a class="header-anchor" href="#流量分析" aria-label="Permalink to &quot;流量分析&quot;">​</a></h1><h2 id="接口的流量" tabindex="-1">接口的流量 <a class="header-anchor" href="#接口的流量" aria-label="Permalink to &quot;接口的流量&quot;">​</a></h2><p>服务器主要是通过<code>proxyMpRequest</code>函数代理微信接口，包括:</p><ul><li>登录流程</li><li>获取登录公众号头像/昵称(从 html 中提取)</li><li>获取公众号列表</li><li>获取文章列表</li></ul><h2 id="资源下载的流量" tabindex="-1">资源下载的流量 <a class="header-anchor" href="#资源下载的流量" aria-label="Permalink to &quot;资源下载的流量&quot;">​</a></h2><p>这部分是代理流量的消耗大户，资源采用代理池并行下载，包括:</p><ul><li>下载文章 html 文本</li><li>下载 html 中的资源文件(图片/样式)</li></ul><h2 id="页面上图片的显示" tabindex="-1">页面上图片的显示 <a class="header-anchor" href="#页面上图片的显示" aria-label="Permalink to &quot;页面上图片的显示&quot;">​</a></h2><p>通过<code>service worker</code>技术规避掉图片的防盗链，这样就可以直接在客户端下载显示，不需要消耗代理流量。</p><ul><li>公众号头像显示</li><li>文章封面图的显示</li></ul>',10)]))}const p=e(r,[["render",o]]);export{u as __pageData,p as default};
